generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model untuk autentikasi
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  wishlists Wishlist[]

  @@map("users")
}

// Category model
model Category {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  image       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Product model
model Product {
  id                String   @id @default(cuid())
  title             String
  slug              String   @unique
  shortDescription  String
  description       String?
  body              String?
  price             Decimal  @db.Decimal(10, 2)
  discountedPrice   Decimal? @db.Decimal(10, 2)
  quantity          Int      @default(0)
  sku               String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  productVariants   ProductVariant[]
  additionalInformation AdditionalInformation[]
  customAttributes  CustomAttribute[]
  reviews           Review[]
  heroSliders       HeroSlider[]
  heroBanners       HeroBanner[]
  countdowns        Countdown[]
  wishlists         Wishlist[]
  productTags       ProductTag[]
  productOffers     ProductOffer[]

  @@map("products")
}

// ProductTag model untuk tags
model ProductTag {
  id        String   @id @default(cuid())
  tag       String
  createdAt DateTime @default(now())

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, tag])
  @@map("product_tags")
}

// ProductOffer model untuk offers
model ProductOffer {
  id        String   @id @default(cuid())
  offer     String
  createdAt DateTime @default(now())

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, offer])
  @@map("product_offers")
}

// ProductVariant model
model ProductVariant {
  id         String  @id @default(cuid())
  color      String
  image      String
  size       String
  isDefault  Boolean @default(false)
  
  // Relations
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// AdditionalInformation model
model AdditionalInformation {
  id          String @id @default(cuid())
  name        String
  description String
  
  // Relations
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("additional_information")
}

// CustomAttribute model
model CustomAttribute {
  id            String @id @default(cuid())
  attributeName String
  
  // Relations
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValues AttributeValue[]

  @@map("custom_attributes")
}

// AttributeValue model
model AttributeValue {
  id                String @id @default(cuid())
  title             String
  
  // Relations
  customAttributeId String
  customAttribute   CustomAttribute @relation(fields: [customAttributeId], references: [id], onDelete: Cascade)

  @@map("attribute_values")
}

// Review model
model Review {
  id          String   @id @default(cuid())
  name        String
  email       String
  comment     String
  ratings     Int
  isApproved  Boolean  @default(false)
  productSlug String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  product     Product? @relation(fields: [productSlug], references: [slug], onDelete: Cascade)

  @@map("reviews")
}

// HeroSlider model
model HeroSlider {
  id            Int      @id @default(autoincrement())
  sliderName    String
  sliderImage   String
  discountRate  Int
  slug          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("hero_sliders")
}

// HeroBanner model
model HeroBanner {
  id          Int      @id @default(autoincrement())
  bannerName  String?
  bannerImage String
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("hero_banners")
}

// Countdown model
model Countdown {
  id        String   @id @default(cuid())
  title     String
  image     String
  subtitle  String
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("countdowns")
}

// Order model
model Order {
  id          String   @id @default(cuid())
  orderId     String   @unique
  status      String
  totalPrice  Decimal  @db.Decimal(10, 2)
  quantity    Int
  orderTitle  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

// Wishlist model
model Wishlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlists")
}

// Coupon model
model Coupon {
  id              String @id @default(cuid())
  name            String
  code            String @unique
  discount        Int
  maxRedemptions  Int
  timesRedemed    Int    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("coupons")
}

// HeaderSetting model
model HeaderSetting {
  id          String   @id @default(cuid())
  headerLogo  String?
  emailLogo   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("header_settings")
}

// SeoSetting model
model SeoSetting {
  id          String   @id @default(cuid())
  siteName    String?
  title       String?
  description String?
  keywords    String?
  ogImage     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("seo_settings")
}

